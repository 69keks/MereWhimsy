(defvar revealoverviewint false)
(defvar revealoverviewintb false)

(defwindow overviewint 
  :geometry (geometry 
              :x 0 
              :y -50 
              :width 0 
              :height 0 
              :anchor "top center")
  :stacking "overlay"
  :exclusive false 
  :monitor 0
  (box 
    :orientation "v"
    :space-evenly false
    (revealer 
      :reveal revealoverviewint 
      :transition "slidedown"
      (box 
        :orientation "h"
        :space-evenly false 
        (box 
          :width 50 
          :style "margin-top: 10px;"
          :class "fillerl")
        (overview :class "barstruct left right")
        (box 
          :width 50 
          :style "margin-top: 10px;"
          :class "fillerr")))
    (revealer 
      :duration 0 
      :reveal revealoverviewintb 
      :transition "slidedown"
      (box 
        :orientation "h"
        :space-evenly false 
        :halign "center"
        :height 50 
        (box 
          :width 50 
          :class "fillerl")
        (middle)
        (box 
          :width 50 
          :class "fillerr")))))

(defwidget overview [class] 
  (box 
    :class class
    :orientation "h"
    (for i in {[0, 1, 2, 3, 4]}
      (button 
        :onclick "swaymsg -t command workspace number ${i+1}"
        (workspacebox :i i)))))

(defwidget workspacebox [i]
  (box 
    :class "overviewworkspace"
    :space-evenly false 
    :style "
      min-width: ${round(1920/9, 0) + 1}px;
      min-height: ${round(1080/9, 0) + 1}px;
    "
    (for j in {windowsjson[i]}
      (workspacewindow :w j))))

(defwidget workspacewindow [w]
  (box
:style "
      margin-left: ${round((w.rect.x/9), 0)}px; 
      margin-top: ${round((w.rect.y/9), 0)}px; 
      margin-right: -${round((w.rect.x + w.rect.width)/9, 0)}px;
      margin-bottom: -${round(((w.rect.y + w.rect.height)/9), 0)}px;
    "
    :hexpand false 
    :vexpand false 
    :halign "start"
    :valign "start"
    :class "overviewwindow"
    (overlay
      (box 
        :class "overviewwindowhead"
        :height 10
        :hexpand true
        :valign "start")
      (image 
        :valign "center"
        :halign "center"
        :image-width {round(w.rect.width/9 * 45/100, 0)}
        :image-height {round(w.rect.height/9 * 45/100, 0)}
        :path {w.path}))))
