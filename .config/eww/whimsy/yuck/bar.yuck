
(defwindow bar 
  :geometry (geometry 
              :x "0%"
              :y "0%"
              :width "100%"
              :height 50
              :anchor "top center"
              )
  :stacking "bottom"
  :exclusive true
  :monitor 0
  :wm-ignore false
  (barstruct))

(defwidget barstruct []
  (centerbox 
    :height 15
    :orientation "h"
    (top)
    (middle)
    (bottom)
    ))

(defwidget top []
  (box
    :orientation "h"
    :space-evenly false
    :vexpand true
    (topstruct)
    (spacefiller)
    ))

(defwidget middle []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :vexpand true
    :class "barstruct ${ !locked ? 'left right' : '' }"
    (workspaces)))

(defwidget bottom []
  (box 
    :orientation "h"
    :space-evenly false
    :vexpand true
    (spacefiller)
    (bottomstruct)))

(defwidget topstruct [] 
  (box 
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "barstruct ${ !locked ? 'right' : '' }"
    (dashtoggle)
    (lockintoggle)))

(defwidget bottomstruct [] 
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "barstruct ${ !locked ? 'left' : '' }"
    (stray)
    (system)
    (time)
    ))

(defwidget dashtoggle []
  (button
    ; :onclick "${EWW_CMD} open dashboard --toggle"
    :onclick '${ !revealoverviewint ? "./scripts/hackslide revealdashint revealdashintb" : ""}'
    (box
      ; :width 40
      ; :class "barpfp"
      :class "widget"
      :style "padding: 0px 10px;"
      (label
        :text "Dashboard")
      (label 
        :visible false
        :text pstatus))
    ; (image
    ;   :image-width 40
    ;   :path "./assets/roundpfp.png")
    ))

(defwidget lockintoggle []
  (button 
    :onclick "${EWW_CMD} update locked=${!locked}"
    :style "padding: 0px 5px;"
    (label 
      :class "icon"
      :tooltip { locked ? "locked in" : "Dilly dally" }
      :text { locked ? "󰌾" : "" })))

(defwidget sidedeco [area] 
  (overlay 
    (box 
      :width 20 
      :visible locked
      :class "sidedeco bottom"
      :vexpand true)
    (box 
      :class "sidedeco ${ locked ? 'active'+area : ''}"
      :vexpand true
      )))

(defwidget spacefiller []
  (box 
    :hexpand true
    :class "filler ${ locked ? 'inactive' : '' }"))

;; may need to change to fit all screen sizes
(defwindow fakecornerl
  :geometry (geometry 
              :x "0%"
              :y "0%"
              :width "100%"
              :height 1030
              :anchor "top center"
              )
  :stacking "bottom"
  :exclusive false
  :monitor 0
  :wm-ignore false
  (box 
    :class "fakecornersl active"))

(include "./yuck/widgets/workspaces.yuck")
(include "./yuck/widgets/time.yuck")
(include "./yuck/widgets/battery.yuck")
(include "./yuck/widgets/system.yuck")
(include "./yuck/widgets/music.yuck")
